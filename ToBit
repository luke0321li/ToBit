#!/usr/bin/env python3

import argparse as ap
import pylab as pl
from PIL import Image
from src.convert import *


def main():
    parser = ap.ArgumentParser()
    parser.add_argument('input_path', help='Input image file path', nargs='?')
    parser.add_argument('output_path', help='Output image file path, default: tobit_output.png in current directory',
                        nargs='?', default='./tobit_output.png')
    parser.add_argument('-c', '--color_num', help='Number of colors in the final image, default 8.', nargs='?',
                        type=int, default=8,
                        const=8, dest='color_num')
    parser.add_argument('-s', '--block_size',
                        help='Size of pixels. Larger number indicates lower resolution and fewer pixels, default 4',
                        nargs='?', type=int, default=4, const=4, dest='block_size')
    parser.add_argument('-i', '--max_iter', help='Maximum iterations for K-means clustering, default 20',
                        nargs=1, type=int, default=20, dest='max_iter')
    parser.add_argument('-m', '--mode', help='During pixel block conversion, adjacent pixels are merged and the \
                        most frequent color would be kept',
                        action='store_true')
    parser.add_argument('-n', '--no_clustering', help='Skip color clustering, overrides -c option', action='store_true')
    parser.add_argument('-r', '--reverse_pipeline',
                        help='Revert the pipeline order: merge adjacent pixels first then do clustering',
                        action='store_true')

    args = parser.parse_args()
    input_path = args.input_path
    output_path = args.output_path
    block_size = args.block_size
    num_centroids = args.color_num
    max_iter = args.max_iter
    mode = args.mode
    no_clustering = args.no_clustering
    reverse_pipeline = args.reverse_pipeline
    input_image = pl.imread(input_path)

    # output_image = convert_blocks(input_image, size, 'mean')
    # raw_clustered = cluster_pixels(input_image, size)

    is_mode = 'mean'
    if mode:
        is_mode = 'mode'
    if no_clustering:
        output_image = convert_blocks(input_image, block_size, 'mean')
    elif reverse_pipeline:
        output_image = cluster_pixels(convert_blocks(input_image, block_size, 'mean'), num_centroids, max_iter)
    else:
        output_image = convert_blocks(cluster_pixels(input_image, num_centroids, max_iter), block_size, is_mode)
    im = Image.fromarray(output_image.astype('uint8'), 'RGB')
    im.save(output_path)


if __name__ == '__main__':
    main()
